Topics for the course

From the syllabus
    Topics
        Stages of software development
        Testing
        UML diagrams
        Elementary data structures (lists, stacks, queues, and maps)
        Use of elementary data structures in application frameworks (e.g., JFC-Java Foundation Classes)
        Searching
        Sorting
        Introduction to asymptotic complexity analysis.
    Outcomes
        [software-lifecycle] Explain the steps in different models of the Software lifecycle, and understand different design, testing and debugging techniques. Understand the importance of Abstract Data Types and Data Structures. Use UML to represent ADTs. [requirements]
        [complexity] Learn about Big-O and calculate the Big O of diverse algorithms and use it to compare efficiency. [problem-solving]
        [Collections] Use and understand the Collection class in Java, with major emphasis on Lists, Stacks and Queues. [software]
        [Trees] Implement Binary Search Trees, Max/Min-Heaps, Priority Queues, and understand self-balancing Binary Search Trees such as Red-Black and AVL trees. [software]
        [Sets-Maps] Understand what are Sets and Maps, and more specifically implement hash tables. [software]
        [Sorting] Program sorting algorithms including bubble sort, insertion sort, selection sort, shell sort, quick sort, merge sort, heap sort. [software]
        [Programming] Combine different classes to implement big programming assignments, including a final project that combines some of the data structures studied in class. [problem-solving]

Software lifecycle
    Steps
    Design, testing, debugging techniques
    Importance of Abstract Data Types and Data Structures
    UML to represent ADTs
Complexity
    What is Big-O and how is it calculated
Collections
    Use/understand java Collection class(specifically Lists, Stacks, Queues)
Trees
    Implement BSTs, Max/Min Heaps, Priority Queues
    Understand self-balancing BSTs like Red-Black and AVL trees
Set-Maps
    Understand what sets and maps are, specifically how to implement hash-tables
Sorting
    Program sorting algorithms
        Bubble sort
        Insertion sort
        Selection sort
        Shell sort
        Quick sort
        Merge sort
        Heap sort
Programming
    Combin classes to implement big assignments, including a final project that combines data structures covered in class
